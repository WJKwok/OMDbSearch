[{"/Users/wen/Development/OMDbSearch/frontend/src/index.js":"1","/Users/wen/Development/OMDbSearch/frontend/src/App.js":"2","/Users/wen/Development/OMDbSearch/frontend/src/Pages/Nomination.js":"3","/Users/wen/Development/OMDbSearch/frontend/src/Components/SearchBar.js":"4","/Users/wen/Development/OMDbSearch/frontend/src/Services/OMDbRequests.js":"5"},{"size":193,"mtime":1609955036220,"results":"6","hashOfConfig":"7"},{"size":204,"mtime":1609955348172,"results":"8","hashOfConfig":"7"},{"size":891,"mtime":1609956836758,"results":"9","hashOfConfig":"7"},{"size":1009,"mtime":1609956930525,"results":"10","hashOfConfig":"7"},{"size":163,"mtime":1609955853389,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"h1t1sc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/wen/Development/OMDbSearch/frontend/src/index.js",[],["24","25"],"/Users/wen/Development/OMDbSearch/frontend/src/App.js",[],"/Users/wen/Development/OMDbSearch/frontend/src/Pages/Nomination.js",["26"],"import React, { useState, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\n\nimport { SearchBar } from '../Components/SearchBar';\n\nimport { OMDdBySearch } from '../Services/OMDbRequests';\n\nexport const Nomination = () => {\n\tconst [searchInput, setSearchInput] = useState('');\n\tconst setSearchInputDebounced = debounce(setSearchInput, 500);\n\n\tconst [searchResults, setSearchResults] = useState({});\n\n\tuseEffect(async () => {\n\t\tconst OMDbRequestUrl = ` http://www.omdbapi.com/?s=${searchInput}&apikey=${process.env.REACT_APP_OMDB_API_KEY}`;\n\t\tconst results = await OMDdBySearch(OMDbRequestUrl);\n\t\tsetSearchResults(results);\n\t\tconsole.log(results);\n\t}, [searchInput]);\n\n\treturn (\n\t\t<>\n\t\t\t<SearchBar searchInputUpdate={setSearchInputDebounced} />\n\t\t\t{searchResults.Response === 'True' ? (\n\t\t\t\t<p>Results Available</p>\n\t\t\t) : (\n\t\t\t\t<p>{searchResults.Error}</p>\n\t\t\t)}\n\t\t</>\n\t);\n};\n","/Users/wen/Development/OMDbSearch/frontend/src/Components/SearchBar.js",[],"/Users/wen/Development/OMDbSearch/frontend/src/Services/OMDbRequests.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":14,"column":12,"nodeType":"33","endLine":19,"endColumn":3},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]